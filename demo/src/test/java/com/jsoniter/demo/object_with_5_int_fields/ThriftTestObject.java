package com.jsoniter.demo.object_with_5_int_fields; /**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftTestObject implements org.apache.thrift.TBase<ThriftTestObject, ThriftTestObject._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftTestObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftTestObject");

  private static final org.apache.thrift.protocol.TField FIELD1_FIELD_DESC = new org.apache.thrift.protocol.TField("field1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD2_FIELD_DESC = new org.apache.thrift.protocol.TField("field2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD3_FIELD_DESC = new org.apache.thrift.protocol.TField("field3", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD4_FIELD_DESC = new org.apache.thrift.protocol.TField("field4", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FIELD5_FIELD_DESC = new org.apache.thrift.protocol.TField("field5", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftTestObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftTestObjectTupleSchemeFactory());
  }

  public int field1; // required
  public int field2; // required
  public int field3; // required
  public int field4; // required
  public int field5; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD1((short)1, "field1"),
    FIELD2((short)2, "field2"),
    FIELD3((short)3, "field3"),
    FIELD4((short)4, "field4"),
    FIELD5((short)5, "field5");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD1
          return FIELD1;
        case 2: // FIELD2
          return FIELD2;
        case 3: // FIELD3
          return FIELD3;
        case 4: // FIELD4
          return FIELD4;
        case 5: // FIELD5
          return FIELD5;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIELD1_ISSET_ID = 0;
  private static final int __FIELD2_ISSET_ID = 1;
  private static final int __FIELD3_ISSET_ID = 2;
  private static final int __FIELD4_ISSET_ID = 3;
  private static final int __FIELD5_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD1, new org.apache.thrift.meta_data.FieldMetaData("field1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD2, new org.apache.thrift.meta_data.FieldMetaData("field2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD3, new org.apache.thrift.meta_data.FieldMetaData("field3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD4, new org.apache.thrift.meta_data.FieldMetaData("field4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELD5, new org.apache.thrift.meta_data.FieldMetaData("field5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftTestObject.class, metaDataMap);
  }

  public ThriftTestObject() {
  }

  public ThriftTestObject(
    int field1,
    int field2,
    int field3,
    int field4,
    int field5)
  {
    this();
    this.field1 = field1;
    setField1IsSet(true);
    this.field2 = field2;
    setField2IsSet(true);
    this.field3 = field3;
    setField3IsSet(true);
    this.field4 = field4;
    setField4IsSet(true);
    this.field5 = field5;
    setField5IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftTestObject(ThriftTestObject other) {
    __isset_bitfield = other.__isset_bitfield;
    this.field1 = other.field1;
    this.field2 = other.field2;
    this.field3 = other.field3;
    this.field4 = other.field4;
    this.field5 = other.field5;
  }

  public ThriftTestObject deepCopy() {
    return new ThriftTestObject(this);
  }

  @Override
  public void clear() {
    setField1IsSet(false);
    this.field1 = 0;
    setField2IsSet(false);
    this.field2 = 0;
    setField3IsSet(false);
    this.field3 = 0;
    setField4IsSet(false);
    this.field4 = 0;
    setField5IsSet(false);
    this.field5 = 0;
  }

  public int getField1() {
    return this.field1;
  }

  public ThriftTestObject setField1(int field1) {
    this.field1 = field1;
    setField1IsSet(true);
    return this;
  }

  public void unsetField1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD1_ISSET_ID);
  }

  /** Returns true if field field1 is set (has been assigned a value) and false otherwise */
  public boolean isSetField1() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD1_ISSET_ID);
  }

  public void setField1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD1_ISSET_ID, value);
  }

  public int getField2() {
    return this.field2;
  }

  public ThriftTestObject setField2(int field2) {
    this.field2 = field2;
    setField2IsSet(true);
    return this;
  }

  public void unsetField2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD2_ISSET_ID);
  }

  /** Returns true if field field2 is set (has been assigned a value) and false otherwise */
  public boolean isSetField2() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD2_ISSET_ID);
  }

  public void setField2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD2_ISSET_ID, value);
  }

  public int getField3() {
    return this.field3;
  }

  public ThriftTestObject setField3(int field3) {
    this.field3 = field3;
    setField3IsSet(true);
    return this;
  }

  public void unsetField3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD3_ISSET_ID);
  }

  /** Returns true if field field3 is set (has been assigned a value) and false otherwise */
  public boolean isSetField3() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD3_ISSET_ID);
  }

  public void setField3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD3_ISSET_ID, value);
  }

  public int getField4() {
    return this.field4;
  }

  public ThriftTestObject setField4(int field4) {
    this.field4 = field4;
    setField4IsSet(true);
    return this;
  }

  public void unsetField4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD4_ISSET_ID);
  }

  /** Returns true if field field4 is set (has been assigned a value) and false otherwise */
  public boolean isSetField4() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD4_ISSET_ID);
  }

  public void setField4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD4_ISSET_ID, value);
  }

  public int getField5() {
    return this.field5;
  }

  public ThriftTestObject setField5(int field5) {
    this.field5 = field5;
    setField5IsSet(true);
    return this;
  }

  public void unsetField5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELD5_ISSET_ID);
  }

  /** Returns true if field field5 is set (has been assigned a value) and false otherwise */
  public boolean isSetField5() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELD5_ISSET_ID);
  }

  public void setField5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELD5_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD1:
      if (value == null) {
        unsetField1();
      } else {
        setField1((Integer)value);
      }
      break;

    case FIELD2:
      if (value == null) {
        unsetField2();
      } else {
        setField2((Integer)value);
      }
      break;

    case FIELD3:
      if (value == null) {
        unsetField3();
      } else {
        setField3((Integer)value);
      }
      break;

    case FIELD4:
      if (value == null) {
        unsetField4();
      } else {
        setField4((Integer)value);
      }
      break;

    case FIELD5:
      if (value == null) {
        unsetField5();
      } else {
        setField5((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD1:
      return Integer.valueOf(getField1());

    case FIELD2:
      return Integer.valueOf(getField2());

    case FIELD3:
      return Integer.valueOf(getField3());

    case FIELD4:
      return Integer.valueOf(getField4());

    case FIELD5:
      return Integer.valueOf(getField5());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD1:
      return isSetField1();
    case FIELD2:
      return isSetField2();
    case FIELD3:
      return isSetField3();
    case FIELD4:
      return isSetField4();
    case FIELD5:
      return isSetField5();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftTestObject)
      return this.equals((ThriftTestObject)that);
    return false;
  }

  public boolean equals(ThriftTestObject that) {
    if (that == null)
      return false;

    boolean this_present_field1 = true;
    boolean that_present_field1 = true;
    if (this_present_field1 || that_present_field1) {
      if (!(this_present_field1 && that_present_field1))
        return false;
      if (this.field1 != that.field1)
        return false;
    }

    boolean this_present_field2 = true;
    boolean that_present_field2 = true;
    if (this_present_field2 || that_present_field2) {
      if (!(this_present_field2 && that_present_field2))
        return false;
      if (this.field2 != that.field2)
        return false;
    }

    boolean this_present_field3 = true;
    boolean that_present_field3 = true;
    if (this_present_field3 || that_present_field3) {
      if (!(this_present_field3 && that_present_field3))
        return false;
      if (this.field3 != that.field3)
        return false;
    }

    boolean this_present_field4 = true;
    boolean that_present_field4 = true;
    if (this_present_field4 || that_present_field4) {
      if (!(this_present_field4 && that_present_field4))
        return false;
      if (this.field4 != that.field4)
        return false;
    }

    boolean this_present_field5 = true;
    boolean that_present_field5 = true;
    if (this_present_field5 || that_present_field5) {
      if (!(this_present_field5 && that_present_field5))
        return false;
      if (this.field5 != that.field5)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ThriftTestObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetField1()).compareTo(other.isSetField1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field1, other.field1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField2()).compareTo(other.isSetField2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field2, other.field2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField3()).compareTo(other.isSetField3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field3, other.field3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField4()).compareTo(other.isSetField4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field4, other.field4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField5()).compareTo(other.isSetField5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field5, other.field5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftTestObject(");
    boolean first = true;

    sb.append("field1:");
    sb.append(this.field1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field2:");
    sb.append(this.field2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field3:");
    sb.append(this.field3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field4:");
    sb.append(this.field4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("field5:");
    sb.append(this.field5);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftTestObjectStandardSchemeFactory implements SchemeFactory {
    public ThriftTestObjectStandardScheme getScheme() {
      return new ThriftTestObjectStandardScheme();
    }
  }

  private static class ThriftTestObjectStandardScheme extends StandardScheme<ThriftTestObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftTestObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field1 = iprot.readI32();
              struct.setField1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field2 = iprot.readI32();
              struct.setField2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field3 = iprot.readI32();
              struct.setField3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field4 = iprot.readI32();
              struct.setField4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIELD5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.field5 = iprot.readI32();
              struct.setField5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftTestObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FIELD1_FIELD_DESC);
      oprot.writeI32(struct.field1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD2_FIELD_DESC);
      oprot.writeI32(struct.field2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD3_FIELD_DESC);
      oprot.writeI32(struct.field3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD4_FIELD_DESC);
      oprot.writeI32(struct.field4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD5_FIELD_DESC);
      oprot.writeI32(struct.field5);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftTestObjectTupleSchemeFactory implements SchemeFactory {
    public ThriftTestObjectTupleScheme getScheme() {
      return new ThriftTestObjectTupleScheme();
    }
  }

  private static class ThriftTestObjectTupleScheme extends TupleScheme<ThriftTestObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftTestObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetField1()) {
        optionals.set(0);
      }
      if (struct.isSetField2()) {
        optionals.set(1);
      }
      if (struct.isSetField3()) {
        optionals.set(2);
      }
      if (struct.isSetField4()) {
        optionals.set(3);
      }
      if (struct.isSetField5()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetField1()) {
        oprot.writeI32(struct.field1);
      }
      if (struct.isSetField2()) {
        oprot.writeI32(struct.field2);
      }
      if (struct.isSetField3()) {
        oprot.writeI32(struct.field3);
      }
      if (struct.isSetField4()) {
        oprot.writeI32(struct.field4);
      }
      if (struct.isSetField5()) {
        oprot.writeI32(struct.field5);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftTestObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.field1 = iprot.readI32();
        struct.setField1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.field2 = iprot.readI32();
        struct.setField2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.field3 = iprot.readI32();
        struct.setField3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.field4 = iprot.readI32();
        struct.setField4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.field5 = iprot.readI32();
        struct.setField5IsSet(true);
      }
    }
  }

}

